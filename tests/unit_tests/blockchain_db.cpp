// Copyright (c) 2014-2018, The Monero Project
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification, are
// permitted provided that the following conditions are met:
//
// 1. Redistributions of source code must retain the above copyright notice, this list of
//    conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright notice, this list
//    of conditions and the following disclaimer in the documentation and/or other
//    materials provided with the distribution.
//
// 3. Neither the name of the copyright holder nor the names of its contributors may be
//    used to endorse or promote products derived from this software without specific
//    prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
// THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include <boost/algorithm/string/predicate.hpp>
#include <boost/filesystem.hpp>
#include <chrono>
#include <cstdio>
#include <iostream>
#include <thread>

#include "gtest/gtest.h"

#include "blockchain_db/blockchain_db.h"
#include "blockchain_db/lmdb/db_lmdb.h"
#include "string_tools.h"
#ifdef BERKELEY_DB
#include "blockchain_db/berkeleydb/db_bdb.h"
#endif
#include "cryptonote_basic/cryptonote_format_utils.h"

using namespace cryptonote;
using epee::string_tools::pod_to_hex;

#define ASSERT_HASH_EQ(a, b) ASSERT_EQ(pod_to_hex(a), pod_to_hex(b))

namespace
{ // anonymous namespace

const std::vector<std::string> t_blocks = {
	std::string("\x08\x08\xec\xea\xab\xe0\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
				"\x00\x00\x00\x00\x00\x00\x00\x71\xfe\x19\x54\x03\x9a\x97\x0a\x01\xff\xde\x96\x0a\x01\x80\xc1\xed\xac\x9c\x01\x02\x52\x71\xcb\x3c"
				"\xca\x35\xf2\x26\x08\x5c\x93\x59\x5e\x7f\x05\xfc\xdc\x3d\x96\x8a\x70\x07\x2e\x75\xb0\x45\x55\x31\x93\x30\x3a\xdd\x21\x01\xd1\xff"
				"\x9d\x58\x25\x53\xf4\x4f\x6f\x20\xe1\x62\x11\x00\x73\xab\xbe\x38\x23\x67\xfe\x4e\x6e\x8f\x65\x9b\x97\x70\x43\x1d\x2b\xaf\x00\x01"
				"\x35\x79\x96\xf3\xc7\x12\xe9\xf6\xab\x2f\x6b\xee\x7c\xc7\xba\xc4\x84\xb8\xaf\x83\x95\x79\x58\x37\x59\x85\xfa\x10\x98\x4a\x31\x51",
		160),
	std::string("\x08\x08\xb4\xf1\xab\xe0\x05\xe5\x88\xd4\x7f\xc1\xee\x21\x3f\xd0\x6a\xed\xeb\xcf\x5d\xa7\x71\x00\xaf\x4f\x7c\xfe\x96\xef\xd3\x28"
				"\x2f\x51\xcf\x20\x7a\x47\x89\xb6\xfe\x5b\x73\x03\x9b\x97\x0a\x01\xff\xdf\x96\x0a\x01\x80\xc1\xed\xac\x9c\x01\x02\xe3\x26\x67\xf8"
				"\x7c\x63\xba\x08\x6b\xcc\x68\x04\xab\xf3\xec\xc8\xe7\x4b\xfd\x86\x22\x3a\x94\x91\x00\x3c\xa7\x0f\x3d\x9d\x87\xd8\x21\x01\x3c\x33"
				"\x0f\x80\x81\x85\x12\xcd\x85\xf4\x78\x1d\x47\xba\x60\x7f\x7e\xb2\x7f\x82\x8e\xb3\xe3\x52\xcd\x8e\x07\xd6\x1c\xc1\xfe\x4e\x00\x00",
		128)};

const std::vector<size_t> t_sizes =
	{
		1122, 347};

const std::vector<difficulty_type> t_diffs =
	{
		4003674, 4051757};

const std::vector<uint64_t> t_coins =
	{
		1952630229575370, 1970220553446486};

const std::vector<std::vector<std::string>> t_transactions = {{std::string("\x03\x00\x02\x02\x00\x19\x80\x87\x06\xd9\x02\xf0\x19\x9f\x07\x98\x29\xbb\x60\xc0\x0b\x9b\x13\xa1\x21\xd4\x22\xb8\x11\xef\x14\xa7"
																		   "\x0c\xf8\x2c\xf4\x23\xc5\x23\x92\x1e\xda\x03\x9b\x06\xfd\x21\x0b\x39\x08\x1f\x11\xca\x77\xfe\x17\x8e\x05\x12\xe0\xfe\x1c\x43\x3b"
																		   "\x19\x29\xfb\xd0\x4b\xb9\xef\x3c\x35\x83\x34\xf2\xce\xb4\xa2\x60\x7a\x45\x62\x6b\x02\x00\x19\x8f\xdf\x02\x90\x51\xd4\xd2\x03\xaa"
																		   "\x1a\xa6\x29\xd4\x27\xb2\x23\xb5\x05\xbf\x35\x88\x27\xd1\x02\xb3\x25\xf2\x1b\x64\x92\x01\x84\x30\x91\x04\xe3\x18\x02\x13\x99\x01"
																		   "\x1d\x39\x15\x48\x14\xff\x33\xd3\x69\x48\xd6\x87\x0b\x3e\xf0\x6e\xc2\x89\x8e\x76\x33\xb9\x6c\x79\x68\x9d\x38\xd5\xc6\x72\x2b\x09"
																		   "\xf0\xce\x5b\x77\x02\x00\x02\x8a\x61\xb0\x15\x32\x77\x4a\xe2\x99\x0e\x8f\xbc\x45\xe2\xb5\x57\x5b\x3c\xfd\xac\x6b\x8b\x68\xa2\xdc"
																		   "\x0a\xe5\x85\xde\xb5\x2c\xe8\x00\x02\xce\x5b\x8b\x3f\x84\x91\x30\xf5\x06\xa1\x0a\x55\x52\x85\x2f\x4a\xdb\xb4\x8d\x36\xde\x50\xe1"
																		   "\x33\x66\xe1\x43\x66\x63\xe6\x59\xb7\x4a\x01\xf4\xf4\x5c\x42\x47\x99\x59\x47\x01\x1a\xe9\x9f\x03\x18\x18\x54\x17\xd5\x1d\x06\x4a"
																		   "\x80\xd7\x5e\x9e\xa1\xe5\xcc\x75\xcb\x2f\x42\x05\x92\x83\x0f\x06\x12\xb8\xbf\x1a\x14\x45\xba\xfc\x63\x05\x2d\x68\x88\x0f\xe8\xec"
																		   "\x63\xa8\x1a\xff\xd6\x20\x57\xf7\xb7\x49\x0c\x16\x61\x69\x77\xa4\x12\xf3\xb4\xa7\x03\xc0\xc3\x93\x07\x71\xac\xda\x53\xec\x9a\x64"
																		   "\xa2\xdc\xd9\x26\x5a\x1f\xa5\x2c\x75\x5e\x50\x31\xa7\x12\x90\x12\x9d\x12\x25\x8c\x29\x71\x54\xde\x0e\xef\x64\xfa\x9b\x0f\xf6\x93"
																		   "\x0d\x8a\xf4\x31\xe0\x2e\x18\x4b\xff\xcb\xe5\x44\xed\xcf\x9f\xc4\x4e\x59\x0a\xde\x45\x5c\xee\x7e\x0c\x9b\x15\x90\xef\x15\x46\x11"
																		   "\x06\xf1\xd0\x79\x05\x8e\x8c\x9a\xab\xf7\x01\x41\x5b\xbe\xa0\x9b\xc4\x6d\x3a\x00\xb7\xcf\x52\x89\x0d\x82\x1b\xd7\xd6\x81\xaf\x86"
																		   "\x5e\xc2\x97\x46\xdd\x0a\x80\x62\x6e\xc7\x3e\xe4\x5f\x43\x77\xc1\xde\xbe\x28\x9f\x89\x92\xd3\x4c\x08\xb1\x86\x7c\xc0\x71\x22\x1c"
																		   "\x26\x08\x60\x2c\xf6\x85\x69\xa8\xff\x5a\xea\xe4\xda\xd5\x6a\x7b\xac\x10\x5b\x5f\x98\x44\x56\xa6\xc8\x08\x1a\xf6\xd9\x06\xa1\x9c"
																		   "\xf9\xba\xb2\xc9\xb3\x24\x58\xe9\x91\x8a\x35\x35\x9d\x47\xa0\x93\x63\x65\xee\x2f\x2c\x46\x0e\xfa\xe2\x01\x00\x00\x00\xe2\x23\xdf"
																		   "\x74\xc0\x51\xdc\xe6\x1a\xb3\xbf\x61\x6d\xaa\x43\xa4\xc2\x0a\xf0\x2c\x8c\xc5\x0c\xed\x14\x33\x66\x0b\x8d\xf7\x99\x60\x58\x85\x3d"
																		   "\x78\x9a\xaa\xd9\xdd\x34\x2b\x9b\xdb\xa2\x54\x2c\x6f\xb9\x7b\xae\x73\x75\xcd\x55\x52\x17\x51\xe8\xa3\x8d\x04\xa6\x16\xe6\x1a\xd2"
																		   "\x8c\x0f\x34\xe8\x5e\xde\x95\x9a\x71\xfc\x5f\x74\x59\xec\x92\xb6\x60\xec\xae\x4c\x52\x71\x27\x64\x4f\x51\x70\x0e\x5b\xa9\xf2\xed"
																		   "\xa9\xf5\x0d\xac\x96\x12\x23\x4b\x3a\x5e\x54\x4a\x2a\xd1\x20\xfc\xe4\x84\x00\xed\xbd\xc3\xa8\x76\x7b\xfa\x28\xa1\x1e\xaa\x66\x2a"
																		   "\xe1\xe7\xc1\x02\x2a\x87\x81\x8d\xd0\xb5\x2b\xf6\x4e\xec\xd7\x1e\x53\xbf\x34\xa5\xab\x08\xac\x5c\x1a\xa7\x98\x04\x04\x9e\x25\xa4"
																		   "\x65\xe8\xdd\x5a\xb8\x85\x83\xe3\x53\xd5\x66\xec\x46\x32\x91\xc2\xb5\x74\xd7\x9c\x3b\x36\xea\xc3\xfd\x6c\x52\xc9\x0f\x07\xce\x8a"
																		   "\x56\xce\xa7\xfa\xbd\x87\x83\x15\x4b\x5f\xa3\x6d\x8d\x21\x8d\x98\x06\x72\xc6\x3e\x4b\x3d\x54\x82\xf3\x94\x9d\x9a\x59\x6f\xad\x8b"
																		   "\x21\xee\x74\xab\xd8\x62\x3f\x0a\x66\x73\x9c\x16\xcc\x6d\xa5\xf2\x87\x08\x04\x12\x15\x76\x1a\x42\x16\xab\x50\xd0\xc1\xca\x9c\xf2"
																		   "\xfd\x99\xbe\x43\x92\x11\x8d\xcd\x19\x58\x6a\x27\xd1\x24\x16\xf7\xbd\x02\x75\xa0\x23\x71\x73\x96\x7f\x45\x7c\xa1\x29\x6f\x12\x89"
																		   "\x36\x61\x7f\x74\x55\xc4\x75\x0f\xfd\xda\xea\x0b\x11\x59\xdf\x34\x53\xe6\x5c\xfd\xa3\x83\xe7\x8a\xb9\x69\xc0\x08\xc4\x2e\x2d\xad"
																		   "\xa4\xa5\xef\x4d\x27\x7f\x99\xb0\x22\xcc\x3e\x9a\x0a\x6f\xdf\x84\x92\x8a\xa0\x3a\x63\x83\xb9\x01\x99\x5b\x5c\x9a\x48\x60\xfa\x28"
																		   "\xae\xc1\xb1\x24\xc5\x7a\xac\x7e\x78\x3e\x41\xb6\x9a\x41\x21\xd9\xf5\xd1\xea\x71\xf7\x96\xa2\x30\x7f\xd1\x33\x96\xf9\x44\xaf\x82"
																		   "\x65\xb9\xdd\xd0\xc1\x3f\xe1\xf5\xe0\xd0\x45\xf6\x90\x05\xa1\x5c\xa0\x94\xe4\x42\x31\xb5\x02\xd4\x61\xe1\x2e\x48\x7d\x99\x07\x49"
																		   "\x27\x9a\xe4\x00\xf8\x6f\x53\x39\x9d\x99\xc3\xb6\x24\x3a\xd6\x58\xed\xe2\xf1\xa8\xb7\xbb\x70\x8b\x0c\xca\xab\x40\xe0\x16\x93\xc2"
																		   "\x93\x5e\x96\x92\x21\xa8\xb1\x98\x70\x21\x06\xe4\x43\x12\x6b\x38\x69\xb7\x75\x0e\xd6\xff\x6f\x50\xf3\x9d\x9a\x8e\x56\x2b\xa7\x5e"
																		   "\x23\x95\x4d\xc4\x46\xf2\xc8\x6b\xad\x75\x4c\x8e\xbf\x00\x1b\xd7\xd0\x93\x5e\x34\x1d\x4d\xe5\xc0\x25\x79\x26\x79\xab\xf2\xb1\x8a"
																		   "\x41\x2e\xa3\xc2\x29\xa0\x03\xca\x19\xf0\x3e\x19\x76\x51\x87\xe8\x2c\x6f\x46\x97\x64\x22\x9f\xcd\x8a\xa7\x7c\xf7\x5d\x4e\x96\x78"
																		   "\xe6\x72\xb0\x66\xd5\xba\x70\x77\xb0\xad\x38\xbb\x6d\x4c\x37\x99\xca\x94\xfa\x3c\xb0\xe9\x0c\xa1\x3a\x73\xe0\xf8\x04\x64\x17\xc4"
																		   "\x76\x1f\x27\xc6\x1d\x77\x0e\xd6\x5b\x84\x11\x69\xc6\xd2\x93\xc3\x25\x0b\x52\x57\xfa\xef\x7c\xbd\xa2\x93\xbd\xd9\xa9\x76\xdc\x38"
																		   "\xa8\xe3\xfa\x9a\x93\xde\xcf\xd1\xcf\x9f\xf0\x62\x26\xb9\x12\x05\xed\xf6\x4e\x63\x65\x18\x14\x8c\xa4\xaa\x0a\xd5\x79\x4d\x10\x39"
																		   "\x81\x27\x80\xfe\xd1\x01\x60\xe6\x15\x52\x76\x85\x22\xfe\x61\xd6\x96\x9b\xe3\xd4\x0a\xa7\xc5\x8f\xac\xf4\xe9\x3e\xc5\xa1\x0b\xdc"
																		   "\x9d\x86\x6c\xad\x6f\x65\x3d\x3f\xbb\x49\xc2\xa7\x71\x68\x93\xad\xbb\x2b\x80\x44\x5d\xa5\xff\xe5\xb7\xde\x89\xdc\x77\x90\x09\x5a"
																		   "\x77\x46\xeb\x48\xc3\x26\x02\xcf\xb4\x5e\x06\x65\x7f\x93\x51\xb4\x1a\xbf\xa7\xc0\xed\xd0\x05\xde\xdb\x50\xef\xb4\xd1\x02\x04\x67"
																		   "\xc8\xc1\x95\x38\x38\xba\x0c\xc5\x6d\xff\x4d\xd6\x3e\xc2\xb9\xc8\xc2\x22\x8e\x88\xfb\x87\xb6\x05\xc9\xe5\xe9\x99\x37\xc3\x05\xc0"
																		   "\x8f\x29\xd3\x88\xff\x84\x8a\x2a\x74\xa8\x6b\x68\xff\x7b\x44\x2c\x8f\xf7\x73\xed\x13\xf6\x4b\x15\x66\x03\x12\x1f\x06\x2e\x04\xd6"
																		   "\xfe\x60\x0f\x0d\xde\x66\xe2\xb1\xea\x94\xc2\x57\x95\x63\x74\xfa\x24\x20\x48\x79\x0c\x99\xc9\x6b\xd9\xde\xef\x8c\x8c\xf0\x01\xbe"
																		   "\xc5\xb1\x93\xc1\x3d\x0a\xbd\x67\x09\x18\x96\xbe\xb8\x16\x0d\x3e\x58\xa6\x17\x6e\x18\xf7\x9e\x70\x84\xb2\x51\x7d\x34\x7f\x0a\x07"
																		   "\x53\xbd\x58\xe2\xd8\xe6\xda\x62\xfd\x6a\xef\x5a\x16\x82\x06\x42\x0d\xe1\xfb\xc2\x96\xeb\xbe\x60\xd1\x2d\x9c\x61\xa8\xd7\x08\x37"
																		   "\x9d\x90\x89\x68\x47\xa7\x9c\xf1\x50\xdd\x53\x93\x84\xdc\xc4\x45\xec\x8e\x26\xcc\xe4\x49\x7f\x1f\xd6\x6b\x25\xc7\xd7\xdf\x08\xc9"
																		   "\x4f\xf3\xac\x91\x61\x94\x78\xbc\x91\x9f\x7e\xe4\xfe\x7a\x2c\xdf\xe8\xb6\x6f\xa6\x30\xe1\x50\x1e\x71\xe4\xca\xdb\xae\xb3\x03\xd8"
																		   "\x89\x7c\x93\x3d\x68\x11\xbe\xdb\x46\xf9\x54\x33\x0a\x29\x76\xe7\x1c\x42\x76\xb0\x44\xd1\x03\x42\xa2\xfe\x02\x47\x4d\x42\x00\xc8"
																		   "\x14\xb9\xf9\xc5\x52\x28\xf1\x3f\x6a\x9a\x01\x1d\xff\xde\x01\xa8\x8d\x69\x57\x43\xbc\x09\x28\xa5\x33\x41\x22\xca\x51\xfc\x0f\x99"
																		   "\x03\x21\x5e\x82\x12\x04\x6f\x10\xef\x98\x4a\xa1\x8a\x44\x71\xa3\xbd\x2a\x58\xce\x31\x78\x44\xbb\x0e\x15\xd2\x13\x8e\x07\x09\xee"
																		   "\x92\x9c\x8e\x66\xc8\x91\x81\x19\xf3\x87\x4c\xed\x82\x20\xd4\x7b\xd2\x00\x8c\xa3\x36\xba\x0b\xe8\x2c\xb1\x19\x81\xd0\xb8\x00\x6d"
																		   "\x9f\x61\xcb\xb0\x21\xd8\xbe\x1b\x59\xd7\xdd\x5b\xb8\x9c\x45\x9a\x09\xd8\x77\xbc\x20\xc8\x92\x2a\xf4\x61\xfd\xe8\xd4\x1f\x05\xe8"
																		   "\xab\x71\xb7\xe6\x33\xce\x90\xd6\xa2\x03\xa2\x54\x52\x05\x72\xaa\xc9\x69\xc7\x8f\xcc\x65\xd2\x74\x0e\x4e\x2f\xae\x5a\x2b\x0f\xd4"
																		   "\x2d\x0a\xf0\xb8\x0c\x3b\xb3\x91\xb7\xa3\x2d\xc0\xb0\xbf\x94\x5b\xc4\x8e\x0c\xca\xbb\xa9\x53\x73\x71\x5d\x80\x3b\x62\x4e\x0e\x72"
																		   "\xd1\xc1\xc2\x3e\xf2\x8a\x4a\x7e\x83\xff\xb2\xe4\x44\x0b\x30\xbf\x03\x7a\xaf\xc5\xbe\x7f\x49\xcd\x53\xb4\x82\x05\x46\x0e\x02\x71"
																		   "\x89\xbd\x4b\x3e\xc1\xe2\x05\xbf\x17\xbe\xb8\x85\x48\x60\xea\xe4\x07\x5c\x0d\x68\x9a\x31\x38\xd6\x3c\x2d\x06\xb3\x47\x35\x0d\xf2"
																		   "\x08\x35\x20\xda\xde\x26\xe1\x8a\xad\x04\xc9\xce\xfc\x15\xea\x6e\x49\xf3\x92\xe7\xdd\x4b\x8a\xaf\xea\x5a\xd2\xf2\x20\x26\x0f\x72"
																		   "\x78\x4a\x84\x42\x76\x8c\x79\x65\x41\xc3\x51\x18\x25\xa0\x6f\x25\x82\x3a\x8c\x21\x32\xba\xe5\xe8\x51\x2e\x38\x41\x04\x00\x04\xd7"
																		   "\xc2\x91\xfe\x4b\x3b\x4c\x4c\xce\x1a\x69\xa8\xf7\xd0\xb3\xcb\x35\x73\x35\x58\xcb\xa2\xcd\xf6\xeb\xac\x0c\x1d\xe2\x1a\x6e\x0a\x10"
																		   "\xda\x54\x60\x29\x8f\x5b\x4b\x73\x1a\x23\x35\x24\x67\x89\xa1\x59\x30\x71\xfb\x3e\x38\xcc\x2e\xa5\xab\xf3\xa6\x71\x5a\x0e\x05\x88"
																		   "\x2e\x2d\x1b\xc2\xb8\x6e\x64\xe2\xf7\x92\x8f\x42\x63\xee\x61\x72\xab\x80\xd3\x73\x11\x2e\x3b\x8e\xc2\x3f\x2d\xc5\xc1\x75\x0b\xef"
																		   "\x45\xcc\xd6\xa8\x77\x9f\xb1\x58\xaf\x02\xff\x7b\xd4\xfc\x9e\xd8\x0a\xa2\xac\x3c\xfc\x2c\x3d\xa7\xde\x44\x59\x51\x87\xdd\x04\x51"
																		   "\x89\x58\x82\x05\xeb\x7e\xe3\xe3\x99\x0a\xc9\xfb\xc7\xf1\x2a\x05\xd2\x74\xfa\x74\x1c\x2d\xfd\xb1\x2f\xa2\x8f\xbe\x47\x66\x01\x62"
																		   "\x28\x59\xf9\xe2\x76\xdd\x74\xbb\x30\x27\x09\x54\x96\x8d\x27\x70\x67\x37\x47\xd4\x91\x3b\xe4\x05\x0d\x92\x42\xf4\x5e\x94\x0d\x71"
																		   "\x56\x8a\x9f\xdc\x35\x9d\xd7\x09\x3d\xcb\x39\x2b\xe0\xe5\x01\x27\x44\x4e\x46\x18\x6d\xb4\xd0\x3b\x5d\x5f\x88\x7e\xea\x59\x0b\x6f"
																		   "\x48\x66\x70\x45\xec\x6e\x62\x4f\x43\xf4\xeb\x5d\x8f\x59\xf7\x3b\x6a\x66\x95\x0e\xd0\x2d\xe1\x24\xf1\x4a\xa9\x6a\x34\x12\x09\x05"
																		   "\x32\x6f\x75\xb1\x36\xcb\x6b\xa7\x8a\xab\x1f\xaa\xb6\x2b\x0a\x0a\x02\x9b\x57\xaa\x06\x83\x4b\x33\x6e\x1e\xb9\xc0\x5d\x06\x02\x98"
																		   "\xd7\xfe\x00\x5f\x74\x03\xda\xdf\xc7\x96\x45\x35\x94\x1f\xf3\x4d\x4e\xc6\x19\x5b\x25\xc9\x09\x3b\x84\xdc\x79\x06\x1d\x11\x05\xeb"
																		   "\x9f\x53\x3b\xdf\xe5\x40\x45\x3f\x38\xd5\xb2\xae\x2a\xb7\x6d\xdc\x2c\xc6\xb8\x45\x1e\x87\x35\x3f\x87\xb6\x62\xa1\x38\xbb\x09\xc7"
																		   "\x7e\xf7\x3d\xb3\x73\x14\xcb\x6d\xcd\x89\x68\x41\x71\x16\x93\xe1\x9e\xba\xff\xb4\x7d\xb3\x74\xda\x63\x28\x48\xfd\x04\xac\x07\x43"
																		   "\x78\x27\x07\xa9\x62\x48\xfb\xa1\xc1\x06\x9c\x49\xe2\x95\xff\x7f\xb1\xa1\x6e\x5f\xb1\x03\x5b\xe4\xe6\xc4\xe3\xff\xca\x22\x01\x33"
																		   "\x9b\x43\x87\xc8\x4f\x87\xbc\x80\x49\x3d\x11\xe3\x46\xb4\x35\xa5\xd5\x00\xc4\xa6\x1b\x45\x5c\x0e\x1b\x2c\xed\xdd\x47\x4e\x0f\x6b"
																		   "\x31\x68\xfd\x98\x5c\x8e\xc4\xe1\x92\xeb\x1c\x50\x49\x90\x21\x3e\x79\x92\x8d\xc8\x89\xc5\x94\x28\x5d\x71\xdb\xf7\x65\x82\x02\xf4"
																		   "\x55\x45\xd4\x11\x4c\x65\xcd\xc9\xad\x07\x14\x1d\x8c\x03\x2b\x09\xcb\x4d\xbd\xa9\xdf\xb4\x7c\x67\xbc\x05\x71\x90\x94\x02\x0a\x99"
																		   "\xc8\x5c\xee\xfc\xe3\x6e\xee\x35\x66\x3b\xac\x9e\xb9\x3f\x52\xb5\x82\x59\x78\xdf\xc2\x82\x9d\xb4\x0d\xb9\xe5\xea\xa8\x4b\x0d\xff"
																		   "\x19\xe3\x3b\xc4\x32\x1b\xaa\x64\x6f\x29\x59\x83\xff\xa7\x40\xc6\xfc\x9b\x3b\x35\x1d\x4c\xd6\x08\xc3\x20\x3f\x44\xa9\x2d\x01\x91"
																		   "\x8d\xf6\xb0\x8c\x6c\x67\x6e\x20\x0b\xfe\x98\x64\xe8\x5e\x1b\xf9\x21\x13\x58\x30\x70\x0d\xb8\x98\xc6\xe0\x9c\xbb\xa0\x06\x03\xf1"
																		   "\xf4\x56\x51\xd9\x5c\xf7\x14\x4d\xc9\x66\x32\xa1\x6d\x5c\x5b\xcb\x6f\x1e\x22\x35\x52\xae\x4a\xef\xc8\xfd\x39\x4b\xaa\xa3\x0c\xf9"
																		   "\xd7\xcb\x08\x86\xf7\x5c\x90\x09\x51\xf6\x0a\xc3\x39\x99\x03\x4a\xd9\xc7\x0d\x49\xac\xf2\x5f\xcd\x0d\xbe\x34\x11\x9c\xfc\x0a\xfc"
																		   "\x04\x80\xbd\x51\xbc\x9b\xb4\x74\x4a\x1d\x69\x13\x7c\xde\xb7\xb9\x81\x39\x3b\x6e\x24\xfd\x18\xa7\x4f\x4f\x48\x9d\x69\xf8\x07\x99"
																		   "\xd7\xca\xc0\xc7\xdc\x16\x8e\x2d\xd4\xc4\x47\x7e\x1c\xa3\x5f\x04\xf2\xa7\x4d\x33\xb2\x62\x8e\x36\xf2\x44\x02\x75\x96\xfb\x03\x41"
																		   "\x92\xea\x55\x7e\x97\x53\x5b\x1e\xda\x55\x4e\xae\x23\x80\x2c\x6a\x42\x4e\x02\x68\x67\x7a\xd9\xd2\xe5\x68\x32\x9d\xbf\x8e\x05\x3a"
																		   "\x8a\x6e\x7f\x99\xdc\x3c\xc0\xba\xac\x6a\xd0\x09\xf2\x9c\xb8\xe3\xf4\x7b\x9d\xfe\xd7\x64\x2c\xba\x1e\x99\x85\x2c\xfe\xe9\x00\x7b"
																		   "\x57\x25\x7b\xff\x4c\x08\xb5\x6a\xf3\xcd\xa8\x39\x77\xc3\x9b\x7c\xd4\x42\xe1\xea\x8b\x58\x33\xe2\x28\xf9\xe9\xfc\x6d\xde\x01\xc6"
																		   "\xdd\x62\x48\xf9\x92\xad\x66\xfd\xdf\x34\x8a\x46\x5b\x3d\x64\x8e\xce\x42\xd0\xd9\xd8\x01\xb2\xb4\x9b\x0c\x1c\xc1\x27\xf9\x0c\x37"
																		   "\x34\x4a\x98\xec\x03\xcb\xde\x27\xf8\x61\xa0\x9f\x5f\xe0\x63\x8c\x6d\x9a\xb6\x42\x30\x14\x3e\xce\x1f\x15\x6d\x2a\xb7\x05\x0a\x00"
																		   "\x8d\x71\xcb\x0b\xa8\x26\x6f\xfc\xb3\x16\xe1\x96\xaa\xe9\x6f\x34\x77\xa0\xf4\xcc\x6c\x55\x50\xd2\x39\xb6\xe3\x72\x6e\x96\x09\xcc"
																		   "\x02\xfc\xbb\x12\x2e\x82\x25\x84\x79\xa4\xd1\x17\x28\x7c\x46\x16\xc2\x9b\x32\xcc\xcb\xd5\x87\x30\x98\x8b\x08\x04\x7f\x05\x02\xc9"
																		   "\x6e\xb4\x54\x0b\xa8\x33\x21\x20\x62\x55\x4b\x2e\xa1\x5e\x53\x6f\xe4\x13\xf9\xbe\xf2\xcb\xb5\x67\xae\xa3\xaf\x0e\xcc\x52\x07\x21"
																		   "\x87\xfd\x99\x68\xae\x3b\x8d\x86\xe1\x69\xce\x34\x34\x85\x22\x91\xe7\xc9\x52\xfa\xc9\x50\xf9\xde\x3d\x3d\x00\xe7\x04\x47\x0f\x32"
																		   "\x0b\x6f\x07\xc8\xe0\x54\xcc\x22\x13\x41\x17\x95\x85\x31\x67\xeb\x6c\xda\x70\xb1\xfe\x52\x3f\xc1\x5d\xb3\x83\xae\x41\xf9\x05\x11"
																		   "\xf0\x65\xe2\x1c\x43\x05\x21\x29\x3c\x08\x0b\xcc\x67\x5b\xde\xff\x0b\x5f\x7a\x72\x86\x17\x53\x86\xa4\x9e\xef\x8b\xc6\x5f\x0a\xf1"
																		   "\xb2\x86\x51\xc5\x6f\xf1\x36\x57\xbc\x5a\xc1\x91\x7e\x86\xc5\xcb\x48\x01\xc6\x73\xaa\xc9\xde\xe3\x83\xfd\x13\xb3\xb8\xc1\x0a\xfa"
																		   "\xbe\x8d\xa3\x10\xf7\x58\xfb\x4b\x89\x60\xca\xe6\x6d\x3f\x7b\x75\x1f\xf4\xab\xe6\x29\x38\x6d\x1e\x76\x5a\xe8\x41\xb5\xcb\x0d\x28"
																		   "\xf1\x64\x0c\x9c\x4d\xdf\xb8\xb6\xf4\x5d\x31\x07\xcc\x67\xab\x25\x68\x54\x68\x92\x2b\xd1\x81\xe2\x73\x7c\xe2\x56\x59\x30\x08\xd9"
																		   "\xf2\x9a\x9c\xc8\xcb\x85\x1f\x60\x85\x70\x02\xac\xed\x4d\x1b\x9c\xc1\x5b\x17\x07\xff\x3d\x24\x0d\x3f\x5f\x8f\x97\x32\x22\x03\xaa"
																		   "\x4d\x00\xd5\xd5\x90\x9b\x34\x76\x5c\xe4\x74\x2e\xcb\xdc\x96\xf9\x1a\xbd\x52\x66\x81\xd0\x5a\xee\x14\x40\xf3\xa2\xfe\x2a\x0f\x8b"
																		   "\xe1\xb2\xaa\x9a\xf7\x05\x7a\xb4\x92\x56\xea\x03\x9d\xd4\xbf\x32\xa1\x66\xe8\x2e\x2c\x37\x7d\xc8\xdd\x12\x6c\x63\xf1\x70\x0d\xdb"
																		   "\xb1\x43\xae\xf3\x55\x21\xa9\xf0\xe2\xe4\x44\x8e\xc6\xa8\x13\x1b\xc3\x9e\xc8\xca\xc6\xf4\xf1\xe9\x30\x2e\x5e\x89\x10\xef\x0f\xb2"
																		   "\x28\x5d\xcb\xc1\xb0\x53\x87\x22\xa8\xc2\x67\x0b\x5e\x56\x61\xae\x1c\x17\x9f\x2d\x41\xfc\xd4\xa2\xa2\x5a\x82\xbb\xf8\x46\x0a\xa7"
																		   "\xd2\xc0\x0b\x9f\x29\x52\xf0\xce\x88\xe9\x93\xf4\x97\x9f\x39\xa2\x6e\x39\xed\x33\xc8\xfc\x1f\x4d\x44\x2f\x0b\xc2\xe0\x03\x0d\xab"
																		   "\x35\xa6\x79\xc4\xdd\xd1\x42\xa0\xaf\x71\x33\xce\x41\xf7\x96\x95\xdf\xe1\xd5\x8c\x3c\xc0\x66\xce\xe6\x58\x90\x78\x93\x8a\x0e\x03"
																		   "\x2d\x49\xd0\xa7\x3f\x88\x6c\x5c\x09\x03\xa8\xba\xc6\xe9\x43\x7e\xe8\xa9\x25\x07\x68\x3a\xf9\x2c\x21\x10\xa3\x36\x41\xe7\x01\x39"
																		   "\xf8\x19\x8e\x35\xd0\x69\xe2\xdf\x8e\x5c\x25\x73\x75\xdf\xb8\x54\x9e\x55\x37\xbe\x83\xe9\x31\x88\x2d\x80\x95\xf8\xf8\x98\x09\x45"
																		   "\x7b\xf8\x9c\xe7\x72\x95\xb0\x11\xe4\xcf\x67\xf8\x2a\x0f\x62\x9b\xc7\x6c\x34\x1f\xbe\x23\x55\xdc\x03\xa1\xef\xa1\x85\xc7\x02\x10"
																		   "\x8b\xba\x1e\xbb\x7d\x69\x61\x24\x59\xe2\x10\x45\x95\x29\x00\x02\x7d\x73\x82\x2d\x46\x8f\x06\xef\x23\xac\x98\xfb\xc7\x2e\x07\xb8"
																		   "\x92\x7d\x87\x2c\x7c\x40\xad\xd8\xb4\xe8\x62\xcb\x12\x7d\x8f\x24\xe5\xc3\x7c\xb0\xec\x8b\x40\x2f\x9b\x61\xda\x37\x41\xc0\x02\xcf"
																		   "\xfb\x58\xe6\x99\xbc\xac\xdc\xcb\xd8\x5d\xfe\x28\xd6\x01\x17\xce\x40\xe9\xdd\xa9\xfd\x90\xe1\xc4\xa2\x4b\x56\xca\xd6\x2b\x03\xf6"
																		   "\x9b\x08\x43\x83\xe6\x2f\x8a\x76\x51\xf2\x77\xbd\xaf\xfd\xf9\x08\x6c\xbf\xe9\x43\x05\x84\xc1\xcf\x29\x44\x77\xa3\xe8\x2e\x0f\x1a"
																		   "\x8a\x87\xe1\xb7\x7e\x17\xa2\xd1\xd9\xfa\x1c\x3d\x2b\xe8\xda\x97\x7e\x6c\xc3\x87\xeb\xdf\x4b\x44\x95\x92\x88\x6f\xf9\x8c\x0e\xd8"
																		   "\x6f\x2c\x1b\xf8\xed\x07\x69\xa5\xf0\xdd\x13\x0a\x66\xc5\xd7\x60\xe3\xd5\xfb\x2d\x21\xfc\x03\x60\xf7\x98\x1a\x26\xda\xe5\x02\x76"
																		   "\xf2\xe4\xc1\x4a\x76\x49\x5a\xe9\x12\x40\xa5\x0d\x7e\xa3\x47\x07\x55\x80\xf7\x21\x11\xa9\xd3\xb8\x8d\xa4\x25\x93\x6d\x64\x0e\xd7"
																		   "\x21\xfe\xc6\xb6\xe6\x71\x90\xfe\xa5\x40\x58\x90\xad\xfd\xe0\x59\x52\xd8\xde\x96\xdc\x9b\x0e\x82\x00\xc7\x08\xdf\x56\x5a\x0d\x01"
																		   "\xab\x70\xa7\xd2\x01\x46\x4e\x49\x92\x39\x23\xe0\xcb\x56\x35\x08\x1e\x70\x9b\x34\xad\x48\x5b\x6a\xfb\x9d\x85\x35\x8b\x17\x03\xd7"
																		   "\x7d\xa8\x35\xb1\x94\xca\x65\xaf\x33\xd9\xfc\x22\x2a\x67\x1a\x72\x9e\x1a\x44\x46\xbd\xa9\x04\x7c\x31\xee\x87\xed\x88\x43\x0c\x83"
																		   "\x39\xd1\xbe\xa2\x36\x3b\x62\x53\xcc\x5d\x7f\xe0\x91\xe3\x6c\xd2\xa2\x3e\x29\x5b\xf2\x4a\x16\x09\xb7\x61\x02\xa7\x23\x95\x07\xd2"
																		   "\x17\xaa\x26\xa0\x1f\x31\xec\xa3\x59\x89\xe3\xe6\x36\xb0\xd0\x9a\xa8\x10\xd4\xa9\x89\x20\xc3\x5b\x6c\xe8\x1c\x36\x06\x7f\x05\x86"
																		   "\x5d\xb8\x23\x6c\xb9\x67\x0d\x9b\x4a\xcc\xde\x90\x30\xdf\xa0\xae\xd8\x43\xe2\x85\x4e\x84\x31\x48\xea\x24\xf1\xa3\x3a\x4c\x0e\x7d"
																		   "\xb8\x10\x7e\xe5\x7c\x68\x4c\xa5\x24\xf7\x22\x1f\x8d\x86\x39\x68\x36\xa3\xec\x30\xb5\x94\x1c\xb4\x18\xcf\xc1\xa6\x9d\xb9\x07\x58"
																		   "\x4e\xd3\x2f\x5b\x6d\xc5\x1c\xbb\xfd\xdd\x15\xbc\x45\xaa\x6f\x51\x7a\xc8\xf6\xd8\x92\x47\xb0\x40\x09\x78\x64\x3f\x27\x3f\x01\x7c"
																		   "\x76\x6b\x40\xfd\x13\x14\x1a\xa5\x2e\xd7\xc6\x4a\x32\xf5\x3f\xe6\x62\x15\xbb\x20\x09\x94\xff\x58\xb2\x1b\x61\x9c\x13\x09\x0a\xc9"
																		   "\x3f\x15\xbe\xfe\xcf\x04\x4f\x3e\x0b\xe2\x19\xc2\x26\x41\xb9\xfa\x97\xc1\xfc\xe6\xfd\xc2\xf1\x40\x1f\x31\xf1\xb5\xa4\x61\x07\x06"
																		   "\xde\xf5\x67\xe2\x73\x89\x10\x3c\xa1\x49\x06\xc0\xd8\xe1\x6e\x52\x07\xc6\x1f\x51\xdb\x16\xe8\xaa\x94\x7b\x6b\x73\xd7\x1b\x0e\xb1"
																		   "\x47\xfa\xe5\x08\x1a\x07\x40\x03\x58\xab\x43\xa3\xec\x29\xa4\x81\xce\x1c\x8b\xaf\xc9\xce\x6a\x14\x4d\xa9\x0a\x8d\xb4\x4d\x03\x40"
																		   "\xde\x29\xee\xf1\xfa\xac\xeb\x25\x2b\xd8\x3e\xff\xd2\x16\xd0\x70\xb0\x47\x65\x46\x13\xda\xb6\x2e\x23\x78\x33\x41\x77\x5b\x04\x93"
																		   "\x75\x68\xfd\x7d\x2c\x6a\x22\xd0\x94\x23\xa1\x04\x07\x67\xa4\x7b\xd6\xca\x54\x68\x71\x62\x5a\x4d\x2a\xe9\x5b\x94\x13\x46\x00\x78"
																		   "\xa2\xbb\xe8\xb5\x05\x94\xc9\xda\x59\x6a\xc0\x07\x9b\x2a\x2f\x50\x90\x84\x0e\x48\xb4\x91\x4c\x14\x9a\xf2\xa2\x88\xe0\xca\x09\x90"
																		   "\x84\x3c\x3a\xe9\x97\x36\x3d\x14\x0b\xf0\xff\x9a\xdd\xd1\x25\x4c\x7a\x79\xa4\xab\xec\x5b\x84\x4f\xc6\x86\xa3\x1b\x58\x6a\x03\xd3"
																		   "\xc9\x97\x86\x18\x05\xe1\xd9\xfd\xec\x2d\x63\x5a\x7f\x83\x4d\xde\xf5\x21\x2f\x3f\x5f\xe4\x80\x0c\x7b\x46\x8f\x2c\xad\x9f\x0d\x4f"
																		   "\x9b\x9e\xdf\xb7\x34\x64\xd1\x6b\xc3\x55\x21\xd5\xb2\x4b\xf5\xdf\x5a\x78\xa3\x9e\x7c\xfe\x51\xbf\xc2\xc1\x0f\x1a\x4d\xfa\x09\xb8"
																		   "\x91\x35\x79\x43\xda\xff\x75\x20\xce\xbe\x10\x48\xd7\x6b\x22\x73\x1d\xf8\x33\x34\x66\x47\x31\xd7\x99\x58\x3e\x15\x99\x50\x0a\x5e"
																		   "\x24\xc9\xf1\xd9\x6e\x46\x39\x90\x1b\xf2\x88\x64\x13\x64\x36\x52\x8e\x44\x4e\x01\x9c\x12\xd0\x74\x64\x71\xc6\x0c\xf8\xed\x04\xab"
																		   "\xb8\x55\xa7\x0e\x1b\xe7\x9e\x6d\x02\x4b\xb4\x10\x52\xdf\xaa\xe9\x9a\x73\xbc\x39\xd0\xab\x2d\x6b\x11\x53\xb2\xc5\x15\x9f\x00\xf0"
																		   "\x15\xc0\x74\xb2\x35\x87\x02\x37\xa0\x34\x84\x4f\x67\xd2\x4e\xb9\xde\x30\x85\xfa\xac\xb3\x53\xe4\xe9\xdc\xf6\xaf\xd5\xaa\x05\xee"
																		   "\x08\xe9\xdd\xdb\xcc\xaf\x28\x05\x47\x6c\x54\x88\x1b\xf6\x85\xc4\x30\xb3\x56\x54\xa4\xde\x6c\x25\xbf\xd7\xd0\x06\x3d\x10\x01\x9a"
																		   "\xf4\xc0\x35\xb6\xbc\xe0\x29\x01\x72\xc1\xc7\x2f\x2a\x67\x59\x5d\x1f\x91\x2c\xff\xcb\xb0\xc0\x08\x74\x8b\xb6\xe0\xa3\xf4\x0e\x59"
																		   "\x00\xf2\x29\x0a\x3b\x6d\x89\x33\xc4\xf2\x04\xcd\xc8\x00\xf2\x35\xad\x50\xbe\x3a\x4d\x58\xe2\x11\x45\xe4\x60\x5c\xba\x5a\x0a\x71"
																		   "\xb9\xc7\xaa\xb8\x54\xa1\x5f\x55\xac\x1a\xd7\x11\x45\x9b\x84\x2d\xa8\xb2\xfd\x44\x6b\xba\x0f\x50\x0d\x70\xc8\x85\xfb\x0d\x09\xae"
																		   "\x27\xdf\x01\xa3\xd1\x83\xe9\xe4\x06\xba\x18\x8f\xca\xf1\xd4\xef\xad\xe5\x04\x7b\x75\x11\xe1\x88\x44\x07\x58\x38\x3d\x7a\x0d\x4d"
																		   "\x7b\x1a\x2b\x30\x48\x18\x32\x0d\x84\xbe\x83\x6c\x4b\x6f\xc1\xd1\x69\x42\xe6\xfd\x22\xd1\x22\x52\xc4\xbc\x3e\x14\xcb\xe4\x05\x34"
																		   "\xc5\xcc\x30\xed\x8f\xce\x52\xbf\x54\x37\x10\x45\xe0\x6b\x8f\x06\xd6\x2f\xc2\x84\xef\x25\xeb\xf1\xc8\x6d\x0e\x6c\xb3\x82\x0d\xdc"
																		   "\x15\x66\xb7\xa8\x84\xb0\x10\xe7\x2e\x47\x60\xb6\xa1\x14\x32\x6f\x4b\x1c\x66\xab\x30\x37\xb1\x1d\xf1\x69\x7b\xec\x13\x70\x0b\x05"
																		   "\xa3\x2d\x0f\x34\x2c\xc4\x81\x12\xca\xde\x89\x30\x62\x5a\xf1\x25\x1d\xea\x65\x80\x3c\xb0\x00\x1b\xba\xd0\xe2\xcc\x30\xe3\x2b\xd0"
																		   "\x27\x27\x9f\x77\x28\xb0\xd5\x13\x2e\x9b\x25\x8a\x86\x12\xa8\x5b\x3c\x2f\xc4\x14\x1a\x53\x35\x97\xe3\x35\xfe\xc6\xc9\x8f\x63",
																  4575)},

	{}

};

// if the return type (blobdata for now) of block_to_blob ever changes
// from std::string, this might break.
bool compare_blocks(const block &a, const block &b)
{
	auto hash_a = pod_to_hex(get_block_hash(a));
	auto hash_b = pod_to_hex(get_block_hash(b));

	return hash_a == hash_b;
}

/*
void print_block(const block& blk, const std::string& prefix = "")
{
  std::cerr << prefix << ": " << std::endl
            << "\thash - " << pod_to_hex(get_block_hash(blk)) << std::endl
            << "\tparent - " << pod_to_hex(blk.prev_id) << std::endl
            << "\ttimestamp - " << blk.timestamp << std::endl
  ;
}

// if the return type (blobdata for now) of tx_to_blob ever changes
// from std::string, this might break.
bool compare_txs(const transaction& a, const transaction& b)
{
  auto ab = tx_to_blob(a);
  auto bb = tx_to_blob(b);

  return ab == bb;
}
*/

template <typename T>
class BlockchainDBTest : public testing::Test
{
  protected:
	BlockchainDBTest() :
		m_db(new T()), m_hardfork(*m_db, 1, 0)
	{
		for(auto &i : t_blocks)
		{
			block bl;
			parse_and_validate_block_from_blob(i, bl);
			m_blocks.push_back(bl);
		}
		for(auto &i : t_transactions)
		{
			std::vector<transaction> txs;
			for(auto &j : i)
			{
				transaction tx;
				parse_and_validate_tx_from_blob(j, tx);
				txs.push_back(tx);
			}
			m_txs.push_back(txs);
		}
	}

	~BlockchainDBTest()
	{
		delete m_db;
		remove_files();
	}

	BlockchainDB *m_db;
	HardFork m_hardfork;
	std::string m_prefix;
	std::vector<block> m_blocks;
	std::vector<std::vector<transaction>> m_txs;
	std::vector<std::string> m_filenames;

	void init_hard_fork()
	{
		m_hardfork.init();
		m_db->set_hard_fork(&m_hardfork);
	}

	void get_filenames()
	{
		m_filenames = m_db->get_filenames();
		for(auto &f : m_filenames)
		{
			std::cerr << "File created by test: " << f << std::endl;
		}
	}

	void remove_files()
	{
		// remove each file the db created, making sure it starts with fname.
		for(auto &f : m_filenames)
		{
			if(boost::starts_with(f, m_prefix))
			{
				boost::filesystem::remove(f);
			}
			else
			{
				std::cerr << "File created by test not to be removed (for safety): " << f << std::endl;
			}
		}

		// remove directory if it still exists
		boost::filesystem::remove_all(m_prefix);
	}

	void set_prefix(const std::string &prefix)
	{
		m_prefix = prefix;
	}
};

using testing::Types;

typedef Types<BlockchainLMDB
#ifdef BERKELEY_DB
	,
	BlockchainBDB
#endif
	>
	implementations;

TYPED_TEST_CASE(BlockchainDBTest, implementations);

TYPED_TEST(BlockchainDBTest, OpenAndClose)
{
	boost::filesystem::path tempPath = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();
	std::string dirPath = tempPath.string();

	this->set_prefix(dirPath);

	// make sure open does not throw
	ASSERT_NO_THROW(this->m_db->open(dirPath));
	this->get_filenames();

	// make sure open when already open DOES throw
	ASSERT_THROW(this->m_db->open(dirPath), DB_OPEN_FAILURE);

	ASSERT_NO_THROW(this->m_db->close());
}

TYPED_TEST(BlockchainDBTest, AddBlock)
{

	boost::filesystem::path tempPath = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();
	std::string dirPath = tempPath.string();

	this->set_prefix(dirPath);

	// make sure open does not throw
	ASSERT_NO_THROW(this->m_db->open(dirPath));
	this->get_filenames();
	this->init_hard_fork();

	// adding a block with no parent in the blockchain should throw.
	// note: this shouldn't be possible, but is a good (and cheap) failsafe.
	//
	// TODO: need at least one more block to make this reasonable, as the
	// BlockchainDB implementation should not check for parent if
	// no blocks have been added yet (because genesis has no parent).
	//ASSERT_THROW(this->m_db->add_block(this->m_blocks[1], t_sizes[1], t_diffs[1], t_coins[1], this->m_txs[1]), BLOCK_PARENT_DNE);

	ASSERT_NO_THROW(this->m_db->add_block(this->m_blocks[0], t_sizes[0], t_diffs[0], t_coins[0], this->m_txs[0]));
	ASSERT_NO_THROW(this->m_db->add_block(this->m_blocks[1], t_sizes[1], t_diffs[1], t_coins[1], this->m_txs[1]));

	block b;
	ASSERT_TRUE(this->m_db->block_exists(get_block_hash(this->m_blocks[0])));
	ASSERT_NO_THROW(b = this->m_db->get_block(get_block_hash(this->m_blocks[0])));

	ASSERT_TRUE(compare_blocks(this->m_blocks[0], b));

	ASSERT_NO_THROW(b = this->m_db->get_block_from_height(0));

	ASSERT_TRUE(compare_blocks(this->m_blocks[0], b));

	// assert that we can't add the same block twice
	ASSERT_THROW(this->m_db->add_block(this->m_blocks[0], t_sizes[0], t_diffs[0], t_coins[0], this->m_txs[0]), TX_EXISTS);

	for(auto &h : this->m_blocks[0].tx_hashes)
	{
		transaction tx;
		ASSERT_TRUE(this->m_db->tx_exists(h));
		ASSERT_NO_THROW(tx = this->m_db->get_tx(h));

		ASSERT_HASH_EQ(h, get_transaction_hash(tx));
	}
}

TYPED_TEST(BlockchainDBTest, RetrieveBlockData)
{
	boost::filesystem::path tempPath = boost::filesystem::temp_directory_path() / boost::filesystem::unique_path();
	std::string dirPath = tempPath.string();

	this->set_prefix(dirPath);

	// make sure open does not throw
	ASSERT_NO_THROW(this->m_db->open(dirPath));
	this->get_filenames();
	this->init_hard_fork();

	ASSERT_NO_THROW(this->m_db->add_block(this->m_blocks[0], t_sizes[0], t_diffs[0], t_coins[0], this->m_txs[0]));

	ASSERT_EQ(t_sizes[0], this->m_db->get_block_size(0));
	ASSERT_EQ(t_diffs[0], this->m_db->get_block_cumulative_difficulty(0));
	ASSERT_EQ(t_diffs[0], this->m_db->get_block_difficulty(0));
	ASSERT_EQ(t_coins[0], this->m_db->get_block_already_generated_coins(0));

	ASSERT_NO_THROW(this->m_db->add_block(this->m_blocks[1], t_sizes[1], t_diffs[1], t_coins[1], this->m_txs[1]));
	ASSERT_EQ(t_diffs[1] - t_diffs[0], this->m_db->get_block_difficulty(1));

	ASSERT_HASH_EQ(get_block_hash(this->m_blocks[0]), this->m_db->get_block_hash_from_height(0));

	std::vector<block> blks;
	ASSERT_NO_THROW(blks = this->m_db->get_blocks_range(0, 1));
	ASSERT_EQ(2, blks.size());

	ASSERT_HASH_EQ(get_block_hash(this->m_blocks[0]), get_block_hash(blks[0]));
	ASSERT_HASH_EQ(get_block_hash(this->m_blocks[1]), get_block_hash(blks[1]));

	std::vector<crypto::hash> hashes;
	ASSERT_NO_THROW(hashes = this->m_db->get_hashes_range(0, 1));
	ASSERT_EQ(2, hashes.size());

	ASSERT_HASH_EQ(get_block_hash(this->m_blocks[0]), hashes[0]);
	ASSERT_HASH_EQ(get_block_hash(this->m_blocks[1]), hashes[1]);
}

} // anonymous namespace
